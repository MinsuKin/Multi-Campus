<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lab.mybatis.map.ChartMapper">

<!-- 그래프 데이터 검색 쿼리   ##################################################################### -->

   <!-- 매출액 1행 -->
   <select id="getPreIncomeData" resultType="lab.spring.sikgu.model.IncomeVO" parameterType="hashmap">
    select s_name , sum(decode(gubun, 'store_MM', income)) as mm_income,
    sum(decode(gubun, 'a10', ratio)) as a10_ratio,
    sum(decode(gubun, 'a20', ratio)) as a20_ratio,
    sum(decode(gubun, 'a30', ratio)) as a30_ratio,
    sum(decode(gubun, 'a40', ratio)) as a40_ratio,
    sum(decode(gubun, 'a50', ratio)) as a50_ratio,
    sum(decode(gubun, 'a60', ratio)) as a60_ratio
    from pre_income_new
    where B_CODE = #{B_CODE}
    and year = 2019 and quarter = 1
    group by  s_name
   </select>

  
<select id="getMoveIncomeData" resultType="lab.spring.sikgu.model.move_incomeVO" parameterType="hashmap">
   with  m_pop as (select
        sum(decode(gubun, 'T1', mov_pop)) as T1_mov_pop,
          sum(decode(gubun, 'T2', mov_pop)) as T2_mov_pop,
          sum(decode(gubun, 'T3', mov_pop)) as T3_mov_pop,
          sum(decode(gubun, 'T4', mov_pop)) as T4_mov_pop,
          sum(decode(gubun, 'T5', mov_pop)) as T5_mov_pop,
          sum(decode(gubun, 'T6', mov_pop)) as T6_mov_pop
          from mov_pop_new
          where B_CODE = #{B_CODE}
          and year = 2019 and quarter = 1)
   select s_name , 
      sum(decode(gubun, 'mm', income)) as mm_income,
       sum(decode(gubun, 't0006', income)) as t1_income,
       sum(decode(gubun, 't0611', income)) as t2_income,
       sum(decode(gubun, 't1114', income)) as t3_income,
       sum(decode(gubun, 't1417', income)) as t4_income,
       sum(decode(gubun, 't1721', income)) as t5_income,
       sum(decode(gubun, 't2124', income)) as t6_income,
         (select t1_mov_pop from m_pop) as T1_mov_pop,
       (select t2_mov_pop from m_pop) as T2_mov_pop,
       (select t3_mov_pop from m_pop) as T3_mov_pop,
       (select t4_mov_pop from m_pop) as T4_mov_pop,
       (select t5_mov_pop from m_pop) as T5_mov_pop,
       (select t6_mov_pop from m_pop) as T6_mov_pop
       from pre_income_new , m_pop
       where b_code = #{B_CODE} and s_code = #{S_CODE}
       and year = 2019 and quarter = 1
       group by s_name
   </select>



<select id="getTotalData" resultType="lab.spring.sikgu.model.total_chartVO" parameterType="hashmap">
   with  w_pop as (select
        sum(decode(gubun, 'A1_WP', WOR_POP)) as a1_wor_pop,
          sum(decode(gubun, 'A2_WP', WOR_POP)) as a2_wor_pop,
          sum(decode(gubun, 'A3_WP', WOR_POP)) as a3_wor_pop,
          sum(decode(gubun, 'A4_WP', WOR_POP)) as a4_wor_pop,
          sum(decode(gubun, 'A5_WP', WOR_POP)) as a5_wor_pop,
          sum(decode(gubun, 'A6_WP', WOR_POP)) as a6_wor_pop
          from work_pop_new
          where B_CODE = #{B_CODE}
          and year = 2019 and quarter = 1),
        m_pop as (select
          sum(decode(gubun, 'A10', mov_pop)) as a1_mov_pop,
          sum(decode(gubun, 'A20', mov_pop)) as a2_mov_pop,
          sum(decode(gubun, 'A30', mov_pop)) as a3_mov_pop,
          sum(decode(gubun, 'A40', mov_pop)) as a4_mov_pop,
          sum(decode(gubun, 'A50', mov_pop)) as a5_mov_pop,
          sum(decode(gubun, 'A60', mov_pop)) as a6_mov_pop
          from mov_pop_new
          where B_CODE = #{B_CODE}
          and year = 2019 and quarter = 1)
   select s_name , 
      sum(decode(gubun, 'mm', income)) as mm_income,
       sum(decode(gubun, 'store', cnt)) as cnt,
       sum(decode(gubun, 'a10', income)) as a1_income,
       sum(decode(gubun, 'a20', income)) as a2_income,
       sum(decode(gubun, 'a30', income)) as a3_income,
       sum(decode(gubun, 'a40', income)) as a4_income,
       sum(decode(gubun, 'a50', income)) as a5_income,
       sum(decode(gubun, 'a60', income)) as a6_income,
       (select a1_wor_pop from w_pop) as a1_wor_pop,
       (select a2_wor_pop from w_pop) as a2_wor_pop,
       (select a3_wor_pop from w_pop) as a3_wor_pop,
       (select a4_wor_pop from w_pop) as a4_wor_pop,
       (select a5_wor_pop from w_pop) as a5_wor_pop,
       (select a6_wor_pop from w_pop) as a6_wor_pop,
         (select a1_mov_pop from m_pop) as a1_mov_pop,
       (select a2_mov_pop from m_pop) as a2_mov_pop,
       (select a3_mov_pop from m_pop) as a3_mov_pop,
       (select a4_mov_pop from m_pop) as a4_mov_pop,
       (select a5_mov_pop from m_pop) as a5_mov_pop,
       (select a6_mov_pop from m_pop) as a6_mov_pop
       from pre_income_new , w_pop, m_pop 
       where b_code = #{B_CODE} and s_code = #{S_CODE} and cnt is not null
       and year = 2019 and quarter = 1
       group by s_name
</select>


<select id="age_ratio" resultType="lab.spring.sikgu.model.IncomeVO" parameterType="hashmap">
	select income from pre_income_new
	where GUBUN like 'a__' and b_code = #{B_CODE} and s_code = #{S_CODE}
    and year = 2019 and quarter = 1
    order by gubun
</select>

 <select id="getMaxIncome" resultType="lab.spring.sikgu.model.MaxIncomeVO" parameterType="hashmap">
    with s_income as  (
                     select  s_name, gubun,  income 
                     from pre_income_new
                     where B_CODE = #{B_CODE} and year = 2019 and quarter = 1 and gubun like 't____'),
         s_cnt as (select s_name , cnt from pre_income_new  
                  where B_CODE = #{B_CODE} and year = 2019 and quarter = 1 and gubun = 'store'),
         max_income  as ( select s_income.s_name as  s_name, s_income.gubun as gubun,  s_income.income/s_cnt.cnt as store_income
                       from s_income  , s_cnt  
                       where s_income.s_name = s_cnt.s_name   )      
select s.s_name  s_name, x.gubun  gubun, round(x.max_store_income,0)  max_store_income                     
from  (select   gubun , max(store_income)  max_store_income
       from  max_income
       group by gubun)  x ,
      max_income s
where s.gubun  = x.gubun
and   x.max_store_income = s.store_income
order by x.gubun
   </select>

</mapper>